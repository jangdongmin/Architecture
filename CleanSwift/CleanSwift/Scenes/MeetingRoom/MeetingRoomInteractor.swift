//
//  MeetingRoomInteractor.swift
//  CleanSwift_test
//
//  Created by Paul Jang on 2019/12/24.
//  Copyright (c) 2019 Paul Jang. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SwiftyJSON

protocol MeetingRoomBusinessLogic {
    func doJsonLoad()
    func doCurrentTimeCalculate()
    func UiPositionCompletionHandler(request: MeetingRoom.UiPositionCompletionHandler.Request, completionHandler: (CGFloat, CGFloat, Array<UIView>) -> Void)
    func doTimeSetting(request: MeetingRoom.TimeSet.Request)
}

protocol MeetingRoomDataStore {
    
}
 
class MeetingRoomInteractor: MeetingRoomBusinessLogic, MeetingRoomDataStore {
    var presenter: MeetingRoomPresentationLogic?
    var worker: MeetingRoomWorker?

    var timeBlockDic = [Int:Array<String>]() //예약현황 표시하기위해 사용함.
    
    var timeScheduleDic = [String:Set<Int>]() //현재 사용 가능 회의실 // String = 시간. Set<Int> = RoomIndex
    var availableRoom = [String]() //현재 사용 가능 회의실 String.
    
    var currentHour: String = "00"
    var currentMinute: String = "00"
    
    //예약 가능한 첫 시간
    var firstHourBlock: String = "09"
    var firstMinuteBlock: String = "00"
    
    //예약 가능한 마지막 시간
    var lastHourBlock: String = "17"
    var lastMinuteBlock: String = "30"
    
    func doTimeSetting(request: MeetingRoom.TimeSet.Request) {
        //1. JSON에서 reservations를 추출한다.
        //2. startTime과 endTime 값을 timeScheduleDic의 dictionary에 담아둔다. key는 time (ex. 0900, 1000, 1030),  value는 room Index값.  (Set에 담아둠)
        //3. startTime와 endTime 사이의 시간을 계산한다. 시간 * 60 을 해서 분으로 만든다음 30분씩 더해서 계산함. 계산한 데이터는 timeScheduleDic 에 담아둠.
        //4. 09:00 (firstHourBlock, firstMinuteBlock) 이전의 시간은 제외시킨다. 18:00 이후의 시간도
        for (index, value) in request.json {
            //1. JSON에서 reservations를 추출
            for item in value["reservations"].arrayValue {

                var startMinute: Int = 0
                var endMinute: Int = 0
                
                //2. startTime과 endTime 값을 timeScheduleDic의 dictionary에 담아둔다
                if let start = item["startTime"].string {
                    if start.count == 4 {
                        if timeScheduleDic[start] != nil {
                            var room:Set<Int> = timeScheduleDic[start]!
                            room.insert(Int(index)!)
                            timeScheduleDic[start] = room
                        } else {
                            timeScheduleDic[start] = Set([Int(index)!])
                        }
                        
                        //예약시간 표시하기 위해.
                        if var result = timeBlockDic[Int(index)!] {
                            result.append(start)
                            timeBlockDic[Int(index)!] = result
                        } else {
                            timeBlockDic[Int(index)!] = Array([start])
                        }
                        
                        let endIndex = start.index(start.startIndex, offsetBy: 2)
                        let hour = String(start[start.startIndex..<endIndex])
                        let minute = String(start[endIndex..<start.index(endIndex, offsetBy: 2)])

                        startMinute = Int(hour)! * 60 + Int(minute)!
                        
                        if timeScheduleDic["\(hour):\(minute)"] != nil {
                            var room:Set<Int> = timeScheduleDic["\(hour):\(minute)"]!
                            room.insert(Int(index)!)
                            timeScheduleDic["\(hour):\(minute)"] = room
                        } else {
                            timeScheduleDic["\(hour):\(minute)"]  = Set([Int(index)!])
                        }
                    }
                }
                
                if let end = item["endTime"].string {
                    if end.count == 4 {
                        let endIndex = end.index(end.startIndex, offsetBy: 2)
                        let hour = String(end[end.startIndex..<endIndex])
                        let minute = String(end[endIndex..<end.index(endIndex, offsetBy: 2)])
                        
                        endMinute = Int(hour)! * 60 + Int(minute)!
                    }
                }
                
                //3. startTime와 endTime 사이의 시간을 계산
                //09:00 -> 540분
                //10:00 -> 600분
                //10:30 -> 630분
                startMinute += 30
                while startMinute < endMinute {
                    let hour = String(format: "%02d", startMinute / 60)
                    let minute = String(format: "%02d", startMinute % 60)
                    
                    if timeScheduleDic["\(hour):\(minute)"] != nil {
                        var room:Set<Int> = timeScheduleDic["\(hour):\(minute)"]!
                        room.insert(Int(index)!)
                        timeScheduleDic["\(hour):\(minute)"] = room
                    } else {
                        timeScheduleDic["\(hour):\(minute)"]  = Set([Int(index)!])
                    }
                    
                    if timeScheduleDic["\(hour)\(minute)"] != nil {
                        var room:Set<Int> = timeScheduleDic["\(hour)\(minute)"]!
                        room.insert(Int(index)!)
                        timeScheduleDic["\(hour)\(minute)"] = room
                    } else {
                        timeScheduleDic["\(hour)\(minute)"]  = Set([Int(index)!])
                    }

                    //예약시간 표시하기 위해.
                    if var result = timeBlockDic[Int(index)!] {
                        result.append("\(hour)\(minute)")
                        timeBlockDic[Int(index)!] = result
                    } else {
                        timeBlockDic[Int(index)!] = Array(["\(hour)\(minute)"])
                    }
                    
                    startMinute += 30
                }
            }
        }
        
        
        //4. 제외
        //09:00 이전 시간 제외
        //18:00 이후 시간 제외
        if currentHour >= firstHourBlock && currentMinute >= firstMinuteBlock &&
            currentHour <= lastHourBlock && currentMinute <= lastMinuteBlock {
            for (index, value) in request.json {
                if timeScheduleDic["\(currentHour)\(currentMinute)"] == nil {
                    availableRoom.append(value["name"].string!)
                } else {
                    let room:Set<Int> = timeScheduleDic["\(currentHour)\(currentMinute)"]!
                    if !room.contains(Int(index)!) {
                        availableRoom.append(value["name"].string!)
                    }
                }
            }
        }

        let response = MeetingRoom.TimeSet.Response(timeBlockDic: timeBlockDic, availableRoom: availableRoom)
        presenter?.timeSet(response: response)
    }

    func UiPositionCompletionHandler(request: MeetingRoom.UiPositionCompletionHandler.Request, completionHandler: (CGFloat, CGFloat, Array<UIView>) -> Void)
    {
        let timeHalfSize = CGFloat(request.cell.currentTimeLabel.frame.size.width / 2)

        request.cell.addTimeBlocks()
          
        //현재시간 이전의 시간들은 모두 OFF시키자.
        //지나간 시간 OFF 하기 위해서.
        var overTimeArr = Array<UIView>()
        var now = (Int(currentHour) ?? 0) * 60 + (Int(currentMinute) ?? 0)
        
        now -= 30
        while now > 0 {
            let prvHour = now / 60
            let prvMinute = now % 60
            let key = String(format: "%02d%02d", prvHour, prvMinute)
            if let view = request.cell.timeBlocks[key] {
                overTimeArr.append(view)
            }
            
            now -= 30
        }
        
        //시간 표시와 시간 막대기를 위해서.
        let key = String(format: "%02d%02d", Int(currentHour) ?? 0, Int(currentMinute) ?? 0)
        if let view = request.cell.timeBlocks[key] {
            let position = view.frame.origin.x
            if Int(currentHour) ?? 0 == 9 && Int(currentMinute) ?? 0 < 30 {
                completionHandler(CGFloat(position), CGFloat(position), overTimeArr)
            } else {
                completionHandler(CGFloat(position), CGFloat(position - timeHalfSize), overTimeArr)
            }
            
        } else if Int(currentHour) ?? 0 <= 9 {
            if let view = request.cell.timeBlocks["\(firstHourBlock)\(firstMinuteBlock)"] {
                let position = view.frame.origin.x
                completionHandler(CGFloat(position), CGFloat(position), overTimeArr)
            }
        } else {
            if let view = request.cell.timeBlocks["\(lastHourBlock)\(lastMinuteBlock)"] {
                let position = view.frame.origin.x + view.frame.size.width
                completionHandler(CGFloat(position), CGFloat(position - timeHalfSize * 2), overTimeArr)
            }
        }
    }
   
    func doJsonLoad() {
        
        if let path = Bundle.main.path(forResource: "test", ofType: "json") {
            do {
                let data = try Data(contentsOf: URL(fileURLWithPath: path))
                let json = JSON(data)
                
                let response = MeetingRoom.Schedule.Response(timeSchedule: json)
                presenter?.jsonParse(response: response)
            } catch {
                let response = MeetingRoom.Schedule.Response(timeSchedule: "")
                presenter?.jsonParse(response: response)
            }
        }
    }
    
    func doCurrentTimeCalculate() {
        worker = MeetingRoomWorker()
        let arr = worker?.currentTime()
        
        var minuteStr: String = "00"
        
        if arr?.minute ?? 0 >= 30 {
            minuteStr = "30"
        }
        
        let hour = String(format: "%02d", arr?.hour! ?? 0)

        currentHour = hour
        currentMinute = minuteStr
        
        let response = MeetingRoom.Time.Response(time: "\(hour):\(minuteStr)")
        presenter?.currentTime(response: response)
    }
}
