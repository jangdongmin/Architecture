//
//  FavoriteListViewController.swift
//  CleanSwift_test
//
//  Created by Paul Jang on 2019/12/23.
//  Copyright (c) 2019 Paul Jang. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FavoriteListDisplayLogic: class {
     
}

class FavoriteListViewController: UIViewController, FavoriteListDisplayLogic {
    
    var interactor: FavoriteListBusinessLogic?
    var router: (NSObjectProtocol & FavoriteListRoutingLogic & FavoriteListDataPassing)?
 
    var page: Int = 1
    var countInPage: Int = 30
    
    @IBOutlet weak var searchTextField: UITextField!
    @IBOutlet weak var favoriteListTableView: UITableView!
    
    // MARK: Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
  
  // MARK: Setup
  
    private func setup() {
        let viewController = self
        let interactor = FavoriteListInteractor()
        let presenter = FavoriteListPresenter()
        let router = FavoriteListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
    // MARK: Routing
  
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
  
    // MARK: View lifecycle
  
    override func viewDidLoad() {
        super.viewDidLoad()
        
        searchTextField.delegate = self
        favoriteListTableView.dataSource = self
        favoriteListTableView.delegate = self
    }
    
    override func viewWillAppear(_ animated: Bool) {
        deleteButtonProcess()
    }
    
    
    @IBAction func nextPageClick(_ sender: Any) {
        let request = FavoriteList.listPreview.Request(searchText: searchTextField.text)
        page += 1
        interactor?.doSearchUser(request: request, completionHandler: { () in
            favoriteListTableView.reloadData()
        })
    }
    
    @IBAction func searchButtonClick(_ sender: Any) {
        searchButtonProcess()
    }
    
    @IBAction func deleteButtonClick(_ sender: Any) {
        deleteButtonProcess()
    }
    
    func deleteButtonProcess() {
        page = 1
        searchTextField.text = ""
        searchTextField.resignFirstResponder()
        
        searchUser()
    }
    
    func searchUser() {
        let request = FavoriteList.listPreview.Request(searchText: searchTextField.text)
        interactor?.doSearchUser(request: request, completionHandler: { () in
            favoriteListTableView.reloadData()
        })
    }
    
    func searchButtonProcess() {
        page = 1
        searchUser()
        searchTextField.resignFirstResponder()
    }
}

extension FavoriteListViewController: UITextFieldDelegate {
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        searchButtonProcess()
        return true
    }
}

extension FavoriteListViewController: UITableViewDataSource, UITableViewDelegate, SearchUserListCellDelegate {
    func selectButtonClick(index: Int) {
        
        let cell = favoriteListTableView.cellForRow(at: IndexPath.init(row: index, section: 0)) as! SearchUserListCell
        
        let completionHandlerRequest = FavoriteList.CompletionHandler.Request(id: "", tag: cell.favoriteStar.tag)
        interactor?.completionHandler(request: completionHandlerRequest, completionHandler: { (imageName, tag) in
            cell.favoriteStar.tag = tag
            cell.favoriteStar.setImage(UIImage.init(named: imageName), for: UIControl.State.normal)
        })
        
        let request = FavoriteList.favoriteModel.Request(favoriteSelect: SqlService.shared.dataList[index])
        interactor?.doFavoriteCheck(request: request, state: cell.favoriteStar.tag)
        
        searchUser()
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if (page * countInPage) < SqlService.shared.dataList.count {
            return (page * countInPage)
        }
        return SqlService.shared.dataList.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "SearchUserListCell", for: indexPath) as! SearchUserListCell
        cell.backgroundColor = .clear
        cell.selectionStyle = .none
        cell.searchUserListCellDelegate = self
        cell.userName?.text = SqlService.shared.dataList[indexPath.row].login
        cell.userScore?.text = SqlService.shared.dataList[indexPath.row].score
        
        cell.avatarImg.tag = indexPath.row
        cell.avatarImg.sd_setImage(with: URL(string: SqlService.shared.dataList[indexPath.row].avatar_url))
        
        
        let request = FavoriteList.CompletionHandler.Request(id: SqlService.shared.dataList[indexPath.row].id, tag: -1)
        interactor?.completionHandler(request: request, completionHandler: { (imageName, tag) in
            cell.favoriteStar.tag = tag
            cell.favoriteStar.setImage(UIImage.init(named: imageName), for: UIControl.State.normal)
        })

        return cell
    }
 
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 70
    }
}
