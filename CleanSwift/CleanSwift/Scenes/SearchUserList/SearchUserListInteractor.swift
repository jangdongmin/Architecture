//
//  SearchUserListInteractor.swift
//  CleanSwift_test
//
//  Created by Paul Jang on 2019/12/22.
//  Copyright (c) 2019 Paul Jang. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SwiftyJSON

protocol SearchUserListBusinessLogic {
    func doSearchUser(request: SearchUserList.listPreview.Request)
    func pageInit()
    func doFavoriteCheck(request: SearchUserList.favoriteModel.Request, state: Int)
    func doDBLoad()
    func completionHandler(request: SearchUserList.CompletionHandler.Request, completionHandler: (String, Int) -> Void)
}

protocol SearchUserListDataStore {
    var tableViewData: [SearchUserList.listPreview.ViewModel.listPreviewData] { get set }
    var page: Int { get set }
    var loadingData: Bool { get set }
}

class SearchUserListInteractor: SearchUserListBusinessLogic, SearchUserListDataStore {
    var loadingData: Bool = false
    var page: Int = 0
    var tableViewData: [SearchUserList.listPreview.ViewModel.listPreviewData] = []
    
    var presenter: SearchUserListPresentationLogic?
    var worker: SearchUserListWorker?
    
    func completionHandler(request: SearchUserList.CompletionHandler.Request, completionHandler: (String, Int) -> Void) {
        if request.tag == -1 {
            if SqlService.shared.idSet.contains(request.id) {
                completionHandler("star_on", 1)
            } else {
                completionHandler("star_off", 0)
            }
        } else {
            if request.tag == 0 {
                completionHandler("star_on", 1)
            } else {
                completionHandler("star_off", 0)
            }
        }
    }
    
    func doFavoriteCheck(request: SearchUserList.favoriteModel.Request, state: Int) {
        let structData = request.favoriteSelect as! SearchUserList.listPreview.ViewModel.listPreviewData
        
        if state == 1 {
            SqlService.shared.saveData(id: structData.id, avatar_url: structData.avatar_url, score: structData.score, login: structData.login)
        } else {
            SqlService.shared.deleteData(id: structData.id)
        }
    }
    
    func doSearchUser(request: SearchUserList.listPreview.Request) {
        
        if !loadingData {
            if request.searchText != "" {
                page += 1;
                loadingData = true
                
                NetworkService.shared.fetchUserInfoList(searchText: request.searchText, page: page, completionHandler: { [weak self] result in
                    guard let self = self else { return }
                    switch result {
                    case .success(let userDatas):
                        self.worker = SearchUserListWorker()
                        let combine = self.worker?.dataCombine(remainData: self.tableViewData, searchResult: userDatas)
                        
                        self.tableViewData = combine!
                        self.loadingData = false
                        
                        let response = SearchUserList.listPreview.Response(searchResult: combine!)
                        self.presenter?.presentSearchList(response: response)
                        
                    case .failure(let error):
                        print("Error", error.localizedDescription)
                    }
                })
            } else {
                let response = SearchUserList.listPreview.Response(searchResult: [])
                self.presenter?.presentSearchList(response: response)
            }
        }
    }
    
    func doDBLoad() {
        worker = SearchUserListWorker()
        worker?.DBLoad()
    }
    
    func pageInit() {
        page = 0
        self.tableViewData.removeAll()
    }
}
